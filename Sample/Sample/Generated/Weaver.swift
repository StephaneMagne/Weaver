import API
import Foundation
import UIKit

// swiftlint:disable all
/// This file is generated by Weaver 1.0.8
/// DO NOT EDIT!

@objc final class MainDependencyContainer: NSObject {

    static var onFatalError: (String, StaticString, UInt) -> Never = { message, file, line in
        Swift.fatalError(message, file: file, line: line)
    }

    fileprivate static func fatalError(file: StaticString = #file, line: UInt = #line) -> Never {
        onFatalError("Invalid memory graph. This is never suppose to happen. Please file a ticket at https://github.com/scribd/Weaver", file, line)
    }

    private typealias ParametersCopier = (MainDependencyContainer) -> Void
    private typealias Builder<T> = (ParametersCopier?) -> T

    private func builder<T>(_ value: T) -> Builder<T> {
        return { [weak self] copyParameters in
            guard let self = self else {
                MainDependencyContainer.fatalError()
            }
            copyParameters?(self)
            return value
        }
    }

    private func weakOptionalBuilder<T>(_ value: Optional<T>) -> Builder<Optional<T>> where T: AnyObject {
        return { [weak value] _ in value }
    }

    private func weakBuilder<T>(_ value: T) -> Builder<T> where T: AnyObject {
        return { [weak self, weak value] copyParameters in
            guard let self = self, let value = value else {
                MainDependencyContainer.fatalError()
            }
            copyParameters?(self)
            return value
        }
    }

    private func lazyBuilder<T>(_ builder: @escaping Builder<T>) -> Builder<T> {
        var _value: T?
        return { copyParameters in
            if let value = _value {
                return value
            }
            let value = builder(copyParameters)
            _value = value
            return value
        }
    }

    private func weakLazyBuilder<T>(_ builder: @escaping Builder<T>) -> Builder<T> where T: AnyObject {
        weak var _value: T?
        return { copyParameters in
            if let value = _value {
                return value
            }
            let value = builder(copyParameters)
            _value = value
            return value
        }
    }

    private static func fatalBuilder<T>() -> Builder<T> {
        return { _ in
            MainDependencyContainer.fatalError()
        }
    }

    private var builders = Dictionary<String, Any>()
    private func getBuilder<T>(for name: String, type _: T.Type) -> Builder<T> {
        guard let builder = builders[name] as? Builder<T> else {
            return MainDependencyContainer.fatalBuilder()
        }
        return builder
    }

    private static var _dynamicResolvers = [Any]()
    private static var _dynamicResolversLock = NSRecursiveLock()

    fileprivate static func _popDynamicResolver<Resolver>(_ resolverType: Resolver.Type) -> Resolver {
        guard let dynamicResolver = _dynamicResolvers.removeFirst() as? Resolver else {
            MainDependencyContainer.fatalError()
        }
        return dynamicResolver
    }

    static func _pushDynamicResolver<Resolver>(_ resolver: Resolver) {
        _dynamicResolvers.append(resolver)
    }

    enum Scope {
        case transient
        case container
        case weak
        case lazy
    }

    enum Platform {
        case OSX
        case macOS
        case iOS
        case watchOS
        case tvOS
    }

    enum DependencyKind {
        case registration
        case reference
        case parameter
    }

    var homeViewController: UIViewController {
        return getBuilder(for: "homeViewController", type: UIViewController.self)(nil)
    }

    var imageManager: ImageManaging {
        return getBuilder(for: "imageManager", type: ImageManaging.self)(nil)
    }

    var logger: Logger {
        return getBuilder(for: "logger", type: Logger.self)(nil)
    }

    var movieAPI: APIProtocol {
        return getBuilder(for: "movieAPI", type: APIProtocol.self)(nil)
    }

    func movieController(movieID: UInt,
                         movieTitle: String) -> UIViewController {
        let builder: Builder<UIViewController> = getBuilder(for: "movieController", type: UIViewController.self)
        return builder { (_self) in
            _self.builders["movieID"] = _self.builder(movieID)
            _self.builders["movieTitle"] = _self.builder(movieTitle)
        }
    }

    var movieID: UInt {
        return getBuilder(for: "movieID", type: UInt.self)(nil)
    }

    var movieManager: MovieManaging {
        return getBuilder(for: "movieManager", type: MovieManaging.self)(nil)
    }

    var movieTitle: String {
        return getBuilder(for: "movieTitle", type: String.self)(nil)
    }

    var reviewController: WSReviewViewController {
        return getBuilder(for: "reviewController", type: WSReviewViewController.self)(nil)
    }

    var reviewManager: ReviewManaging {
        return getBuilder(for: "reviewManager", type: ReviewManaging.self)(nil)
    }

    var urlSession: URLSession {
        return getBuilder(for: "urlSession", type: URLSession.self)(nil)
    }

    fileprivate override init() {
    }

    fileprivate func appDelegateDependencyResolver() -> AppDelegateDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["logger"] = lazyBuilder { (_: Optional<ParametersCopier>) -> Logger in return Logger() }
        _self.builders["urlSession"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> URLSession in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            return AppDelegate.makeURLSession(_self as URLSessionInputDependencyResolver)
        }
        _self.builders["movieAPI"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> APIProtocol in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            return AppDelegate.makeMovieAPI(_self as MovieAPIInputDependencyResolver)
        }
        _self.builders["imageManager"] = lazyBuilder { (_: Optional<ParametersCopier>) -> ImageManaging in return ImageManager() }
        _self.builders["movieManager"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> MovieManaging in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            return AppDelegate.makeMovieManager(_self as MovieManagingInputDependencyResolver)
        }
        _self.builders["homeViewController"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> UIViewController in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.homeViewControllerDependencyResolver()
            return HomeViewController(injecting: __self)
        }
        _self.builders["reviewManager"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> ReviewManaging in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.reviewManagerDependencyResolver()
            return ReviewManager(injecting: __self)
        }
        _ = _self.getBuilder(for: "logger", type: Logger.self)(nil)
        _ = _self.getBuilder(for: "urlSession", type: URLSession.self)(nil)
        _ = _self.getBuilder(for: "movieAPI", type: APIProtocol.self)(nil)
        _ = _self.getBuilder(for: "imageManager", type: ImageManaging.self)(nil)
        _ = _self.getBuilder(for: "movieManager", type: MovieManaging.self)(nil)
        _ = _self.getBuilder(for: "homeViewController", type: UIViewController.self)(nil)
        _ = _self.getBuilder(for: "reviewManager", type: ReviewManaging.self)(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.logger })
        MainDependencyContainer._pushDynamicResolver({ _self.urlSession })
        MainDependencyContainer._pushDynamicResolver({ _self.movieAPI })
        MainDependencyContainer._pushDynamicResolver({ _self.imageManager })
        MainDependencyContainer._pushDynamicResolver({ _self.movieManager })
        MainDependencyContainer._pushDynamicResolver({ _self.homeViewController })
        return _self
    }

    static func appDelegateDependencyResolver() -> AppDelegateDependencyResolver {
        let _self = MainDependencyContainer().appDelegateDependencyResolver()
        return _self
    }

    private func personManagerDependencyResolver() -> PersonManagerDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["logger"] = lazyBuilder { (_: Optional<ParametersCopier>) -> Logger in return Logger() }
        _self.builders["movieAPI"] = _self.builder(_self.movieAPI)
        _ = _self.getBuilder(for: "logger", type: Logger.self)(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.logger })
        MainDependencyContainer._pushDynamicResolver({ _self.movieAPI })
        return _self
    }

    private func reviewManagerDependencyResolver() -> ReviewManagerDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["logger"] = lazyBuilder { (_: Optional<ParametersCopier>) -> Logger in return Logger() }
        _self.builders["movieAPI"] = _self.builder(movieAPI)
        _ = _self.getBuilder(for: "logger", type: Logger.self)(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.logger })
        MainDependencyContainer._pushDynamicResolver({ _self.movieAPI })
        return _self
    }

    private func homeViewControllerDependencyResolver() -> HomeViewControllerDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["logger"] = lazyBuilder { (_: Optional<ParametersCopier>) -> Logger in return Logger() }
        _self.builders["movieController"] = weakLazyBuilder { [weak _self] (copyParameters: Optional<ParametersCopier>) -> UIViewController in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.movieViewControllerDependencyResolver()
            copyParameters?(__self as! MainDependencyContainer)
            return MovieViewController(injecting: __self)
        }
        _self.builders["imageManager"] = _self.builder(imageManager)
        _self.builders["movieManager"] = _self.builder(movieManager)
        _self.builders["reviewManager"] = _self.builder(reviewManager)
        _ = _self.getBuilder(for: "logger", type: Logger.self)(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.logger })
        MainDependencyContainer._pushDynamicResolver({ _self.movieManager })
        MainDependencyContainer._pushDynamicResolver(_self.movieController)
        return _self
    }

    private func movieViewControllerDependencyResolver() -> MovieViewControllerDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["logger"] = lazyBuilder { (_: Optional<ParametersCopier>) -> Logger in return Logger() }
        _self.builders["reviewController"] = weakLazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> WSReviewViewController in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            return WSReviewViewController.make(_self as WSReviewViewControllerInputDependencyResolver)
        }
        _self.builders["imageManager"] = _self.builder(imageManager)
        _self.builders["movieManager"] = _self.builder(movieManager)
        _self.builders["reviewManager"] = _self.builder(reviewManager)
        _ = _self.getBuilder(for: "logger", type: Logger.self)(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.logger })
        MainDependencyContainer._pushDynamicResolver({ _self.movieID })
        MainDependencyContainer._pushDynamicResolver({ _self.movieTitle })
        MainDependencyContainer._pushDynamicResolver({ _self.movieManager })
        MainDependencyContainer._pushDynamicResolver({ _self.imageManager })
        MainDependencyContainer._pushDynamicResolver({ _self.reviewManager })
        MainDependencyContainer._pushDynamicResolver({ _self.reviewController })
        return _self
    }
}


@objc protocol HomeViewControllerResolver: AnyObject {
    var homeViewController: UIViewController { get }
}

protocol ImageManagerResolver: AnyObject {
    var imageManager: ImageManaging { get }
}

protocol LoggerResolver: AnyObject {
    var logger: Logger { get }
}

protocol MovieAPIResolver: AnyObject {
    var movieAPI: APIProtocol { get }
}

protocol MovieControllerResolver: AnyObject {
    func movieController(movieID: UInt, movieTitle: String) -> UIViewController
}

protocol MovieIDResolver: AnyObject {
    var movieID: UInt { get }
}

protocol MovieManagerResolver: AnyObject {
    var movieManager: MovieManaging { get }
}

protocol MovieTitleResolver: AnyObject {
    var movieTitle: String { get }
}

protocol ReviewControllerResolver: AnyObject {
    var reviewController: WSReviewViewController { get }
}

@objc protocol ReviewManagerResolver: AnyObject {
    var reviewManager: ReviewManaging { get }
}

protocol UrlSessionResolver: AnyObject {
    var urlSession: URLSession { get }
}

extension MainDependencyContainer: HomeViewControllerResolver, ImageManagerResolver, LoggerResolver, MovieAPIResolver, MovieControllerResolver, MovieIDResolver, MovieManagerResolver, MovieTitleResolver, ReviewControllerResolver, ReviewManagerResolver, UrlSessionResolver {
}

extension MainDependencyContainer {
}

typealias AppDelegateDependencyResolver = LoggerResolver & UrlSessionResolver & MovieAPIResolver & ImageManagerResolver & MovieManagerResolver & HomeViewControllerResolver & ReviewManagerResolver

typealias PersonManagerDependencyResolver = LoggerResolver & MovieAPIResolver

typealias ReviewManagerDependencyResolver = LoggerResolver & MovieAPIResolver

typealias HomeViewControllerDependencyResolver = LoggerResolver & MovieManagerResolver & MovieControllerResolver

typealias MovieViewControllerDependencyResolver = LoggerResolver & MovieIDResolver & MovieTitleResolver & MovieManagerResolver & ImageManagerResolver & ReviewManagerResolver & ReviewControllerResolver

typealias MovieAPIInputDependencyResolver = HomeViewControllerResolver & ImageManagerResolver & LoggerResolver & MovieAPIResolver & MovieManagerResolver & ReviewManagerResolver & UrlSessionResolver

typealias MovieManagingInputDependencyResolver = HomeViewControllerResolver & ImageManagerResolver & LoggerResolver & MovieAPIResolver & MovieManagerResolver & ReviewManagerResolver & UrlSessionResolver

typealias URLSessionInputDependencyResolver = HomeViewControllerResolver & ImageManagerResolver & LoggerResolver & MovieAPIResolver & MovieManagerResolver & ReviewManagerResolver & UrlSessionResolver

typealias WSReviewViewControllerInputDependencyResolver = ImageManagerResolver & LoggerResolver & MovieIDResolver & MovieManagerResolver & MovieTitleResolver & ReviewControllerResolver & ReviewManagerResolver

@propertyWrapper
struct Weaver<ConcreteType, AbstractType> {

    typealias Resolver = () -> AbstractType
    let resolver = MainDependencyContainer._popDynamicResolver(Resolver.self)

    init(_ kind: MainDependencyContainer.DependencyKind,
         type: ConcreteType.Type,
         scope: MainDependencyContainer.Scope = .container,
         setter: Bool = false,
         escaping: Bool = false,
         builder: Optional<Any> = nil,
         objc: Bool = false,
         platforms: Array<MainDependencyContainer.Platform> = []) {
        // no-op
    }

    var wrappedValue: AbstractType {
        return resolver()
    }
}

extension Weaver where ConcreteType == Void {
    init(_ kind: MainDependencyContainer.DependencyKind,
         scope: MainDependencyContainer.Scope = .container,
         setter: Bool = false,
         escaping: Bool = false,
         builder: Optional<Any> = nil,
         objc: Bool = false,
         platforms: Array<MainDependencyContainer.Platform> = []) {
        // no-op
    }
}

@propertyWrapper
struct WeaverP2<ConcreteType, AbstractType, P1, P2> {

    typealias Resolver = (P1, P2) -> AbstractType
    let resolver = MainDependencyContainer._popDynamicResolver(Resolver.self)

    init(_ kind: MainDependencyContainer.DependencyKind,
         type: ConcreteType.Type,
         scope: MainDependencyContainer.Scope = .container,
         setter: Bool = false,
         escaping: Bool = false,
         builder: Optional<Any> = nil,
         objc: Bool = false,
         platforms: Array<MainDependencyContainer.Platform> = []) {
        // no-op
    }

    var wrappedValue: Resolver {
        return resolver
    }
}

extension WeaverP2 where ConcreteType == Void {
    init(_ kind: MainDependencyContainer.DependencyKind,
         scope: MainDependencyContainer.Scope = .container,
         setter: Bool = false,
         escaping: Bool = false,
         builder: Optional<Any> = nil,
         objc: Bool = false,
         platforms: Array<MainDependencyContainer.Platform> = []) {
        // no-op
    }
}
